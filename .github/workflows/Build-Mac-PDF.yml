name: Build Invoice Merger

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install customtkinter tkinterdnd2 pillow pypdf2 pyinstaller
        
    - name: Install Ghostscript
      run: brew install ghostscript
        
    - name: List files (debug)
      run: ls -la
        
    - name: Build macOS app
      run: |
        pyinstaller --onefile --windowed --name Invoice_Merger_v1.4.2 invoice_flatten_merge.py
        # Check what was created
        ls -la dist/
        # Rename the app
        mv "dist/Invoice_Merger_v1.4.2.app" "dist/Invoice Merger.app"

    - name: Bundle Ghostscript with app
      run: |
        # Debug: Check what Ghostscript we have
        which gs
        gs --version
        echo "Ghostscript prefix: $(brew --prefix ghostscript)"
        
        # Create ghostscript directory in app bundle  
        mkdir -p "dist/Invoice Merger.app/Contents/Resources/ghostscript"
        
        # Copy Ghostscript binary to app bundle
        cp "$(brew --prefix ghostscript)/bin/gs" "dist/Invoice Merger.app/Contents/Resources/ghostscript/"
        
        # Make it executable
        chmod +x "dist/Invoice Merger.app/Contents/Resources/ghostscript/gs"
        
        # Verify it was copied and is executable
        ls -la "dist/Invoice Merger.app/Contents/Resources/ghostscript/"
        file "dist/Invoice Merger.app/Contents/Resources/ghostscript/gs"
        
        # Test that the bundled Ghostscript works
        "dist/Invoice Merger.app/Contents/Resources/ghostscript/gs" --version
        
        # Check the complete app structure
        echo "=== Complete app structure ==="
        find "dist/Invoice Merger.app" -type f -name "gs" -exec ls -la {} \;

    - name: Remove quarantine attributes (macOS fix)
      run: |
        # Remove extended attributes that cause "damaged" warnings
        sudo xattr -cr "dist/Invoice Merger.app"
        # Set proper permissions
        chmod -R 755 "dist/Invoice Merger.app"
        # Make executable
        chmod +x "dist/Invoice Merger.app/Contents/MacOS/Invoice_Merger_v1.4.2"

    - name: Create DMG
      run: |
        # Create a temporary directory for DMG contents
        mkdir dmg-staging
        cp -R "dist/Invoice Merger.app" dmg-staging/
        # Remove quarantine from DMG contents too
        sudo xattr -cr dmg-staging/
        # Create DMG from staging directory
        hdiutil create -volname "Invoice Merger" -srcfolder dmg-staging -ov -format UDZO "Invoice_Merger_v1.4.2.dmg"
        # Clean up staging
        rm -rf dmg-staging
        # Verify DMG was created
        ls -la *.dmg
        
    - name: Upload macOS DMG
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: Invoice_Merger_v1.4.2.dmg
        
    - name: Upload macOS app
      uses: actions/upload-artifact@v4
      with:
        name: macos-app
        path: dist/Invoice Merger.app